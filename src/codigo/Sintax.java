
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 26 17:52:12 CDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 26 17:52:12 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\011" +
    "\000\002\015\010\000\002\015\012\000\002\015\002\000" +
    "\002\016\007\000\002\017\013\000\002\017\016\000\002" +
    "\017\010\000\002\017\007\000\002\017\005\000\002\017" +
    "\006\000\002\017\013\000\002\017\015\000\002\017\013" +
    "\000\002\017\017\000\002\017\016\000\002\017\017\000" +
    "\002\017\016\000\002\017\017\000\002\017\016\000\002" +
    "\025\013\000\002\026\003\000\002\026\004\000\002\026" +
    "\003\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\006\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\010\000\002\004\007\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\005\000\002\004\010\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\005\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\004\011\000\002\004\004" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\005\000\002\004\007\000\002" +
    "\004\006\000\002\004\011\000\002\004\006\000\002\004" +
    "\005\000\002\004\006\000\002\004\006\000\002\004\005" +
    "\000\002\004\005\000\002\004\011\000\002\004\011\000" +
    "\002\021\005\000\002\021\004\000\002\027\004\000\002" +
    "\027\005\000\002\027\002\000\002\023\004\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\004\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\012\000\002\023\012\000\002" +
    "\023\007\000\002\023\005\000\002\023\006\000\002\023" +
    "\007\000\002\030\003\000\002\030\003\000\002\030\004" +
    "\000\002\030\004\000\002\030\005\000\002\030\005\000" +
    "\002\030\004\000\002\022\005\000\002\024\004\000\002" +
    "\024\007\000\002\006\011\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\006" +
    "\000\002\013\007\000\002\013\011\000\002\013\007\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\006\000\002\013\007\000\002\013\011\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\006" +
    "\000\002\013\007\000\002\013\011\000\002\007\015\000" +
    "\002\010\012\000\002\011\013\000\002\012\011\000\002" +
    "\014\012\000\002\014\012\000\002\014\011\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\031\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e3\000\024\002\ufff9\006\007\013\010\021\004\022" +
    "\017\024\015\031\014\032\005\065\016\001\002\000\004" +
    "\065\u01de\001\002\000\004\065\u01dd\001\002\000\004\002" +
    "\u01dc\001\002\000\004\023\u01d1\001\002\000\004\065\u01d0" +
    "\001\002\000\010\002\000\060\000\064\000\001\002\000" +
    "\010\002\uffff\060\uffff\064\uffff\001\002\000\010\002\ufffd" +
    "\060\ufffd\064\ufffd\001\002\000\006\063\u01ca\065\u0119\001" +
    "\002\000\004\025\u01c6\001\002\000\006\007\u0186\053\u0185" +
    "\001\002\000\004\065\021\001\002\000\010\002\ufffe\060" +
    "\ufffe\064\ufffe\001\002\000\006\007\023\053\022\001\002" +
    "\000\012\013\031\031\033\032\032\046\030\001\002\000" +
    "\004\007\024\001\002\000\004\065\025\001\002\000\004" +
    "\053\026\001\002\000\012\013\031\031\033\032\032\046" +
    "\030\001\002\000\004\054\067\001\002\000\004\032\064" +
    "\001\002\000\010\047\054\056\056\065\055\001\002\000" +
    "\010\047\044\056\046\065\045\001\002\000\010\047\034" +
    "\056\036\065\035\001\002\000\004\065\042\001\002\000" +
    "\014\013\031\031\033\032\032\046\030\054\uffe4\001\002" +
    "\000\004\065\037\001\002\000\014\013\031\031\033\032" +
    "\032\046\030\054\uffdc\001\002\000\004\054\uffd6\001\002" +
    "\000\004\054\uffd4\001\002\000\014\013\031\031\033\032" +
    "\032\046\030\054\uffdf\001\002\000\004\054\uffd9\001\002" +
    "\000\004\065\052\001\002\000\014\013\031\031\033\032" +
    "\032\046\030\054\uffe2\001\002\000\004\065\047\001\002" +
    "\000\014\013\031\031\033\032\032\046\030\054\uffdd\001" +
    "\002\000\004\054\uffd7\001\002\000\004\054\uffd2\001\002" +
    "\000\014\013\031\031\033\032\032\046\030\054\uffe0\001" +
    "\002\000\004\054\uffda\001\002\000\004\065\062\001\002" +
    "\000\014\013\031\031\033\032\032\046\030\054\uffe3\001" +
    "\002\000\004\065\057\001\002\000\014\013\031\031\033" +
    "\032\032\046\030\054\uffdb\001\002\000\004\054\uffd5\001" +
    "\002\000\004\054\uffd3\001\002\000\014\013\031\031\033" +
    "\032\032\046\030\054\uffde\001\002\000\004\054\uffd8\001" +
    "\002\000\004\047\065\001\002\000\004\065\066\001\002" +
    "\000\004\054\uffe1\001\002\000\004\057\070\001\002\000" +
    "\032\013\104\014\111\015\105\016\113\031\076\032\106" +
    "\033\110\035\114\036\116\037\072\045\100\065\077\001" +
    "\002\000\034\013\uffc4\014\uffc4\015\uffc4\016\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\045\uffc4\060" +
    "\uffc4\065\uffc4\001\002\000\004\053\u015c\001\002\000\034" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\031\uffca\032\uffca\033" +
    "\uffca\035\uffca\036\uffca\037\uffca\045\uffca\060\uffca\065\uffca" +
    "\001\002\000\034\013\uffd0\014\uffd0\015\uffd0\016\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\045\uffd0" +
    "\060\uffd0\065\uffd0\001\002\000\034\013\104\014\111\015" +
    "\105\016\113\031\076\032\106\033\110\035\114\036\116" +
    "\037\072\045\100\060\u015a\065\077\001\002\000\006\051" +
    "\u014a\065\u0149\001\002\000\022\010\u0108\027\u0105\040\u010b" +
    "\050\u0104\051\u0109\061\u0107\064\u0106\065\u010a\001\002\000" +
    "\004\044\u0101\001\002\000\034\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce\037" +
    "\uffce\045\uffce\060\uffce\065\uffce\001\002\000\034\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\031\uffcc\032\uffcc\033\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\045\uffcc\060\uffcc\065\uffcc\001\002" +
    "\000\034\013\uffc2\014\uffc2\015\uffc2\016\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\045\uffc2\060\uffc2" +
    "\065\uffc2\001\002\000\006\051\360\065\361\001\002\000" +
    "\004\012\352\001\002\000\004\065\331\001\002\000\034" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\045\uffc8\060\uffc8\065\uffc8" +
    "\001\002\000\004\053\317\001\002\000\010\056\303\065" +
    "\302\066\301\001\002\000\034\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\045\uffc0\060\uffc0\065\uffc0\001\002\000\036\011\223" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\031\uff99\032\uff99\033" +
    "\uff99\035\uff99\036\uff99\037\uff99\045\uff99\060\uff99\065\uff99" +
    "\001\002\000\004\057\211\001\002\000\034\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\045\uffc6\060\uffc6\065\uffc6\001\002\000" +
    "\004\053\117\001\002\000\006\052\121\065\122\001\002" +
    "\000\004\054\173\001\002\000\006\054\uff7e\064\uff7e\001" +
    "\002\000\012\027\124\030\123\041\126\043\125\001\002" +
    "\000\012\005\161\052\162\065\163\066\160\001\002\000" +
    "\012\005\146\052\147\065\150\066\145\001\002\000\012" +
    "\005\133\052\134\065\135\066\132\001\002\000\004\066" +
    "\127\001\002\000\004\043\130\001\002\000\004\066\131" +
    "\001\002\000\006\054\uff77\064\uff77\001\002\000\006\054" +
    "\uff7c\064\uff7c\001\002\000\006\005\142\065\143\001\002" +
    "\000\006\054\uff7d\064\uff7d\001\002\000\010\010\136\054" +
    "\uff7b\064\uff7b\001\002\000\004\065\137\001\002\000\004" +
    "\053\140\001\002\000\004\054\141\001\002\000\006\054" +
    "\uff78\064\uff78\001\002\000\006\054\uff7a\064\uff7a\001\002" +
    "\000\004\005\144\001\002\000\006\054\uff79\064\uff79\001" +
    "\002\000\006\054\uff75\064\uff75\001\002\000\006\005\155" +
    "\065\156\001\002\000\006\054\uff76\064\uff76\001\002\000" +
    "\010\010\151\054\uff74\064\uff74\001\002\000\004\065\152" +
    "\001\002\000\004\053\153\001\002\000\004\054\154\001" +
    "\002\000\006\054\uff71\064\uff71\001\002\000\006\054\uff73" +
    "\064\uff73\001\002\000\004\005\157\001\002\000\006\054" +
    "\uff72\064\uff72\001\002\000\006\054\uff6f\064\uff6f\001\002" +
    "\000\006\005\170\065\171\001\002\000\006\054\uff70\064" +
    "\uff70\001\002\000\010\010\164\054\uff6e\064\uff6e\001\002" +
    "\000\004\065\165\001\002\000\004\053\166\001\002\000" +
    "\004\054\167\001\002\000\006\054\uff6b\064\uff6b\001\002" +
    "\000\006\054\uff6d\064\uff6d\001\002\000\004\005\172\001" +
    "\002\000\006\054\uff6c\064\uff6c\001\002\000\004\057\174" +
    "\001\002\000\032\013\104\014\111\015\105\016\113\031" +
    "\076\032\106\033\110\035\114\036\116\037\072\045\100" +
    "\065\077\001\002\000\034\013\104\014\111\015\105\016" +
    "\113\031\076\032\106\033\110\035\114\036\116\037\072" +
    "\045\100\060\202\065\077\001\002\000\034\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\045\uffc5\060\uffc5\065\uffc5\001\002\000" +
    "\034\013\uffcb\014\uffcb\015\uffcb\016\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\035\uffcb\036\uffcb\037\uffcb\045\uffcb\060\uffcb\065" +
    "\uffcb\001\002\000\034\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\045" +
    "\uffd1\060\uffd1\065\uffd1\001\002\000\034\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\045\uffcf\060\uffcf\065\uffcf\001\002\000\004" +
    "\064\210\001\002\000\034\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\045\uffcd\060\uffcd\065\uffcd\001\002\000\034\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\045\uffc3\060\uffc3\065\uffc3\001\002\000" +
    "\034\013\uffc9\014\uffc9\015\uffc9\016\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\036\uffc9\037\uffc9\045\uffc9\060\uffc9\065" +
    "\uffc9\001\002\000\034\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\045" +
    "\uffc1\060\uffc1\065\uffc1\001\002\000\034\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\045\uffc7\060\uffc7\065\uffc7\001\002\000\034" +
    "\013\uff69\014\uff69\015\uff69\016\uff69\031\uff69\032\uff69\033" +
    "\uff69\035\uff69\036\uff69\037\uff69\045\uff69\060\uff69\065\uff69" +
    "\001\002\000\032\013\104\014\111\015\105\016\113\031" +
    "\076\032\106\033\110\035\114\036\116\037\072\045\100" +
    "\065\077\001\002\000\034\013\104\014\111\015\105\016" +
    "\113\031\076\032\106\033\110\035\114\036\116\037\072" +
    "\045\100\060\213\065\077\001\002\000\004\036\214\001" +
    "\002\000\004\053\215\001\002\000\006\052\121\065\122" +
    "\001\002\000\004\054\217\001\002\000\004\064\220\001" +
    "\002\000\034\013\uff68\014\uff68\015\uff68\016\uff68\031\uff68" +
    "\032\uff68\033\uff68\035\uff68\036\uff68\037\uff68\045\uff68\060" +
    "\uff68\065\uff68\001\002\000\034\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\045\uff9c\060\uff9c\065\uff9c\001\002\000\040\011\223" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\031\uff99\032\uff99\033" +
    "\uff99\035\uff99\036\uff99\037\uff99\045\uff99\060\uff99\064\276" +
    "\065\uff99\001\002\000\012\005\225\017\226\065\227\066" +
    "\224\001\002\000\046\010\260\011\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\031\uff93\032\uff93\033\uff93\035\uff93\036" +
    "\uff93\037\uff93\041\261\045\uff93\056\262\060\uff93\064\uff93" +
    "\065\uff93\001\002\000\010\005\244\065\245\066\243\001" +
    "\002\000\004\064\241\001\002\000\046\011\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\031\uff98\032\uff98\033\uff98\035" +
    "\uff98\036\uff98\037\uff98\041\231\045\uff98\056\232\060\uff98" +
    "\061\230\064\uff98\065\uff98\001\002\000\004\065\237\001" +
    "\002\000\006\065\236\066\235\001\002\000\006\065\234" +
    "\066\233\001\002\000\040\011\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\031\uff94\032\uff94\033\uff94\035\uff94\036\uff94" +
    "\037\uff94\045\uff94\060\uff94\064\uff94\065\uff94\001\002\000" +
    "\040\011\uff96\013\uff96\014\uff96\015\uff96\016\uff96\031\uff96" +
    "\032\uff96\033\uff96\035\uff96\036\uff96\037\uff96\045\uff96\060" +
    "\uff96\064\uff96\065\uff96\001\002\000\040\011\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\031\uff95\032\uff95\033\uff95\035" +
    "\uff95\036\uff95\037\uff95\045\uff95\060\uff95\064\uff95\065\uff95" +
    "\001\002\000\040\011\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\031\uff97\032\uff97\033\uff97\035\uff97\036\uff97\037\uff97" +
    "\045\uff97\060\uff97\064\uff97\065\uff97\001\002\000\004\062" +
    "\240\001\002\000\040\011\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\031\uff8d\032\uff8d\033\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\045\uff8d\060\uff8d\064\uff8d\065\uff8d\001\002\000\034" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\045\uff9a\060\uff9a\065\uff9a" +
    "\001\002\000\004\005\257\001\002\000\012\005\uff88\054" +
    "\255\065\250\066\243\001\002\000\040\011\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\031\uff8c\032\uff8c\033\uff8c\035" +
    "\uff8c\036\uff8c\037\uff8c\045\uff8c\060\uff8c\064\uff8c\065\uff8c" +
    "\001\002\000\014\005\uff89\007\251\010\247\065\250\066" +
    "\243\001\002\000\004\005\uff83\001\002\000\006\065\250" +
    "\066\243\001\002\000\012\005\uff89\010\247\065\250\066" +
    "\243\001\002\000\004\005\252\001\002\000\040\011\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\016\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\045\uff8a\060\uff8a\064\uff8a" +
    "\065\uff8a\001\002\000\004\005\uff84\001\002\000\004\005" +
    "\uff86\001\002\000\010\005\uff87\065\250\066\243\001\002" +
    "\000\004\005\uff85\001\002\000\040\011\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\045\uff8b\060\uff8b\064\uff8b\065\uff8b\001" +
    "\002\000\004\066\265\001\002\000\004\066\264\001\002" +
    "\000\004\066\263\001\002\000\040\011\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\031\uff91\032\uff91\033\uff91\035\uff91" +
    "\036\uff91\037\uff91\045\uff91\060\uff91\064\uff91\065\uff91\001" +
    "\002\000\040\011\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\031\uff92\032\uff92\033\uff92\035\uff92\036\uff92\037\uff92\045" +
    "\uff92\060\uff92\064\uff92\065\uff92\001\002\000\044\011\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\031\uff90\032\uff90\033" +
    "\uff90\035\uff90\036\uff90\037\uff90\041\266\045\uff90\056\267" +
    "\060\uff90\064\uff90\065\uff90\001\002\000\004\066\273\001" +
    "\002\000\004\066\270\001\002\000\004\010\271\001\002" +
    "\000\004\066\272\001\002\000\040\011\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\031\uff8e\032\uff8e\033\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\045\uff8e\060\uff8e\064\uff8e\065\uff8e\001" +
    "\002\000\004\010\274\001\002\000\004\066\275\001\002" +
    "\000\040\011\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\045\uff8f" +
    "\060\uff8f\064\uff8f\065\uff8f\001\002\000\034\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\045\uff9d\060\uff9d\065\uff9d\001\002\000" +
    "\034\013\uff9b\014\uff9b\015\uff9b\016\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\035\uff9b\036\uff9b\037\uff9b\045\uff9b\060\uff9b\065" +
    "\uff9b\001\002\000\036\011\223\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99\037" +
    "\uff99\045\uff99\060\uff99\065\uff99\001\002\000\004\064\316" +
    "\001\002\000\004\064\315\001\002\000\004\065\304\001" +
    "\002\000\006\041\305\056\306\001\002\000\004\056\312" +
    "\001\002\000\004\056\307\001\002\000\004\065\310\001" +
    "\002\000\004\064\311\001\002\000\042\002\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\022\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\045\uff9e\060\uff9e\064\uff9e" +
    "\065\uff9e\001\002\000\004\065\313\001\002\000\004\064" +
    "\314\001\002\000\042\002\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\022\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\045\uff9f\060\uff9f\064\uff9f\065\uff9f\001\002" +
    "\000\042\002\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\022" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\045\uffa0\060\uffa0\064\uffa0\065\uffa0\001\002\000\034\013" +
    "\uff60\014\uff60\015\uff60\016\uff60\031\uff60\032\uff60\033\uff60" +
    "\035\uff60\036\uff60\037\uff60\045\uff60\060\uff60\065\uff60\001" +
    "\002\000\006\052\121\065\122\001\002\000\004\054\321" +
    "\001\002\000\004\057\322\001\002\000\032\013\104\014" +
    "\111\015\105\016\113\031\076\032\106\033\110\035\114" +
    "\036\116\037\072\045\100\065\077\001\002\000\034\013" +
    "\104\014\111\015\105\016\113\031\076\032\106\033\110" +
    "\035\114\036\116\037\072\045\100\060\324\065\077\001" +
    "\002\000\036\013\uff7f\014\uff7f\015\uff7f\016\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\325\035\uff7f\036\uff7f\037\uff7f\045" +
    "\uff7f\060\uff7f\065\uff7f\001\002\000\004\057\326\001\002" +
    "\000\032\013\104\014\111\015\105\016\113\031\076\032" +
    "\106\033\110\035\114\036\116\037\072\045\100\065\077" +
    "\001\002\000\034\013\104\014\111\015\105\016\113\031" +
    "\076\032\106\033\110\035\114\036\116\037\072\045\100" +
    "\060\330\065\077\001\002\000\034\013\uff6a\014\uff6a\015" +
    "\uff6a\016\uff6a\031\uff6a\032\uff6a\033\uff6a\035\uff6a\036\uff6a" +
    "\037\uff6a\045\uff6a\060\uff6a\065\uff6a\001\002\000\010\040" +
    "\334\050\332\064\333\001\002\000\004\005\343\001\002" +
    "\000\042\002\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\022" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\045\uffb3\060\uffb3\064\uffb3\065\uffb3\001\002\000\004\005" +
    "\335\001\002\000\006\005\336\065\337\001\002\000\004" +
    "\064\342\001\002\000\004\005\340\001\002\000\004\064" +
    "\341\001\002\000\042\002\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\022\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\045\uffaf\060\uffaf\064\uffaf\065\uffaf\001\002" +
    "\000\042\002\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\022" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\045\uffb1\060\uffb1\064\uffb1\065\uffb1\001\002\000\006\005" +
    "\344\065\345\001\002\000\004\064\350\001\002\000\004" +
    "\005\346\001\002\000\004\064\347\001\002\000\042\002" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\022\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\045\uffb0\060" +
    "\uffb0\064\uffb0\065\uffb0\001\002\000\042\002\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\022\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\045\uffb2\060\uffb2\064\uffb2" +
    "\065\uffb2\001\002\000\004\064\357\001\002\000\004\065" +
    "\353\001\002\000\006\061\354\064\uff81\001\002\000\004" +
    "\065\355\001\002\000\004\062\356\001\002\000\004\064" +
    "\uff80\001\002\000\034\013\uff82\014\uff82\015\uff82\016\uff82" +
    "\031\uff82\032\uff82\033\uff82\035\uff82\036\uff82\037\uff82\045" +
    "\uff82\060\uff82\065\uff82\001\002\000\004\065\377\001\002" +
    "\000\014\040\366\050\362\051\365\061\364\064\363\001" +
    "\002\000\004\066\375\001\002\000\042\002\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\022\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\045\uffb9\060\uffb9\064\uffb9" +
    "\065\uffb9\001\002\000\004\066\372\001\002\000\004\064" +
    "\371\001\002\000\004\066\367\001\002\000\004\064\370" +
    "\001\002\000\042\002\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\022\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\045\uffb6\060\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\042\002\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\022\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\045" +
    "\uffb5\060\uffb5\064\uffb5\065\uffb5\001\002\000\004\062\373" +
    "\001\002\000\004\064\374\001\002\000\042\002\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\022\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\035\uffb8\036\uffb8\037\uffb8\045\uffb8\060\uffb8\064" +
    "\uffb8\065\uffb8\001\002\000\004\064\376\001\002\000\042" +
    "\002\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\022\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\045\uffb7" +
    "\060\uffb7\064\uffb7\065\uffb7\001\002\000\004\064\u0100\001" +
    "\002\000\042\002\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\022\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\045\uffb4\060\uffb4\064\uffb4\065\uffb4\001\002\000\016" +
    "\013\104\014\u0103\031\076\032\106\045\100\065\077\001" +
    "\002\000\042\002\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\022\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\045\uffa1\060\uffa1\064\uffa1\065\uffa1\001\002\000\006" +
    "\056\303\065\302\001\002\000\006\065\u0143\066\u0142\001" +
    "\002\000\010\013\u0136\031\u0137\032\u0138\001\002\000\042" +
    "\002\uffae\013\uffae\014\uffae\015\uffae\016\uffae\022\uffae\031" +
    "\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae\045\uffae" +
    "\060\uffae\064\uffae\065\uffae\001\002\000\004\066\u0133\001" +
    "\002\000\014\013\010\022\017\031\u0118\032\005\065\016" +
    "\001\002\000\004\064\u0116\001\002\000\006\053\u0110\064" +
    "\u0111\001\002\000\006\065\u010d\066\u010c\001\002\000\004" +
    "\064\u010f\001\002\000\004\064\u010e\001\002\000\042\002" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\022\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\045\uffa2\060" +
    "\uffa2\064\uffa2\065\uffa2\001\002\000\042\002\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\022\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\045\uffa5\060\uffa5\064\uffa5" +
    "\065\uffa5\001\002\000\004\066\u0112\001\002\000\042\002" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\022\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9\045\uffa9\060" +
    "\uffa9\064\uffa9\065\uffa9\001\002\000\004\066\u0113\001\002" +
    "\000\004\054\u0114\001\002\000\004\064\u0115\001\002\000" +
    "\042\002\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\022\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\045" +
    "\uffaa\060\uffaa\064\uffaa\065\uffaa\001\002\000\042\002\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\022\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\045\uffa4\060\uffa4" +
    "\064\uffa4\065\uffa4\001\002\000\004\064\u0132\001\002\000" +
    "\004\065\u0119\001\002\000\006\007\u011b\053\u011a\001\002" +
    "\000\012\013\031\031\033\032\032\046\030\001\002\000" +
    "\004\007\u011c\001\002\000\004\065\u011d\001\002\000\004" +
    "\053\u011e\001\002\000\006\046\u011f\054\u0120\001\002\000" +
    "\012\013\031\031\033\032\032\046\030\001\002\000\004" +
    "\046\u0121\001\002\000\004\057\u0122\001\002\000\032\013" +
    "\104\014\111\015\105\016\113\031\076\032\106\033\110" +
    "\035\114\036\116\037\072\045\100\065\077\001\002\000" +
    "\034\013\104\014\111\015\105\016\113\031\076\032\106" +
    "\033\110\035\114\036\116\037\072\045\100\060\u0124\065" +
    "\077\001\002\000\014\013\010\022\017\031\u0118\032\005" +
    "\065\016\001\002\000\010\002\uffeb\060\uffeb\064\uffeb\001" +
    "\002\000\004\054\u0127\001\002\000\004\057\u0128\001\002" +
    "\000\032\013\104\014\111\015\105\016\113\031\076\032" +
    "\106\033\110\035\114\036\116\037\072\045\100\065\077" +
    "\001\002\000\034\013\104\014\111\015\105\016\113\031" +
    "\076\032\106\033\110\035\114\036\116\037\072\045\100" +
    "\060\u012a\065\077\001\002\000\014\013\010\022\017\031" +
    "\u0118\032\005\065\016\001\002\000\010\002\uffec\060\uffec" +
    "\064\uffec\001\002\000\004\054\u012d\001\002\000\004\057" +
    "\u012e\001\002\000\032\013\104\014\111\015\105\016\113" +
    "\031\076\032\106\033\110\035\114\036\116\037\072\045" +
    "\100\065\077\001\002\000\034\013\104\014\111\015\105" +
    "\016\113\031\076\032\106\033\110\035\114\036\116\037" +
    "\072\045\100\060\u0130\065\077\001\002\000\030\002\ufff9" +
    "\006\007\013\010\021\004\022\017\024\015\031\014\032" +
    "\005\060\ufff9\064\ufff9\065\016\001\002\000\010\002\ufff1" +
    "\060\ufff1\064\ufff1\001\002\000\042\002\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\022\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\045\uffa3\060\uffa3\064\uffa3\065" +
    "\uffa3\001\002\000\004\062\u0134\001\002\000\004\064\u0135" +
    "\001\002\000\042\002\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\022\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\045\uffa8\060\uffa8\064\uffa8\065\uffa8\001\002\000" +
    "\004\030\u013f\001\002\000\004\030\u013c\001\002\000\004" +
    "\030\u0139\001\002\000\004\065\u013a\001\002\000\004\064" +
    "\u013b\001\002\000\042\002\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\022\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036" +
    "\uffad\037\uffad\045\uffad\060\uffad\064\uffad\065\uffad\001\002" +
    "\000\004\065\u013d\001\002\000\004\064\u013e\001\002\000" +
    "\042\002\uffac\013\uffac\014\uffac\015\uffac\016\uffac\022\uffac" +
    "\031\uffac\032\uffac\033\uffac\035\uffac\036\uffac\037\uffac\045" +
    "\uffac\060\uffac\064\uffac\065\uffac\001\002\000\004\065\u0140" +
    "\001\002\000\004\064\u0141\001\002\000\042\002\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\022\uffab\031\uffab\032\uffab" +
    "\033\uffab\035\uffab\036\uffab\037\uffab\045\uffab\060\uffab\064" +
    "\uffab\065\uffab\001\002\000\004\064\u0148\001\002\000\004" +
    "\061\u0144\001\002\000\004\065\u0145\001\002\000\004\062" +
    "\u0146\001\002\000\004\064\u0147\001\002\000\042\002\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\022\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\045\uffa6\060\uffa6" +
    "\064\uffa6\065\uffa6\001\002\000\042\002\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\022\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\045\uffa7\060\uffa7\064\uffa7\065" +
    "\uffa7\001\002\000\014\040\u0151\050\u014d\051\u0150\061\u014f" +
    "\064\u014e\001\002\000\004\065\u014b\001\002\000\004\064" +
    "\u014c\001\002\000\042\002\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\022\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036" +
    "\uffba\037\uffba\045\uffba\060\uffba\064\uffba\065\uffba\001\002" +
    "\000\004\066\u0158\001\002\000\042\002\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\022\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\045\uffbf\060\uffbf\064\uffbf\065" +
    "\uffbf\001\002\000\004\066\u0155\001\002\000\004\064\u0154" +
    "\001\002\000\004\066\u0152\001\002\000\004\064\u0153\001" +
    "\002\000\042\002\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\022\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\045\uffbc\060\uffbc\064\uffbc\065\uffbc\001\002\000\042" +
    "\002\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\022\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\045\uffbb" +
    "\060\uffbb\064\uffbb\065\uffbb\001\002\000\004\062\u0156\001" +
    "\002\000\004\064\u0157\001\002\000\042\002\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\022\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\045\uffbe\060\uffbe\064\uffbe" +
    "\065\uffbe\001\002\000\004\064\u0159\001\002\000\042\002" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\022\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\045\uffbd\060" +
    "\uffbd\064\uffbd\065\uffbd\001\002\000\014\013\010\022\017" +
    "\031\u0118\032\005\065\016\001\002\000\010\002\ufff6\060" +
    "\ufff6\064\ufff6\001\002\000\010\013\u015f\031\u0160\065\u015e" +
    "\001\002\000\004\054\u017b\001\002\000\004\040\u0175\001" +
    "\002\000\004\065\u016e\001\002\000\004\065\u0161\001\002" +
    "\000\004\040\u0162\001\002\000\004\066\u0163\001\002\000" +
    "\004\064\u0164\001\002\000\006\052\121\065\122\001\002" +
    "\000\004\064\u0166\001\002\000\006\051\u0168\065\u0169\001" +
    "\002\000\004\054\uff66\001\002\000\004\065\u016d\001\002" +
    "\000\006\050\u016a\051\u016b\001\002\000\004\066\u016c\001" +
    "\002\000\004\054\uff62\001\002\000\004\054\uff63\001\002" +
    "\000\004\054\uff61\001\002\000\004\040\u016f\001\002\000" +
    "\004\066\u0170\001\002\000\004\064\u0171\001\002\000\006" +
    "\052\121\065\122\001\002\000\004\064\u0173\001\002\000" +
    "\006\051\u0168\065\u0169\001\002\000\004\054\uff65\001\002" +
    "\000\004\066\u0176\001\002\000\004\064\u0177\001\002\000" +
    "\006\052\121\065\122\001\002\000\004\064\u0179\001\002" +
    "\000\006\051\u0168\065\u0169\001\002\000\004\054\uff64\001" +
    "\002\000\004\057\u017c\001\002\000\032\013\104\014\111" +
    "\015\105\016\113\031\076\032\106\033\110\035\114\036" +
    "\116\037\072\045\100\065\077\001\002\000\034\013\104" +
    "\014\111\015\105\016\113\031\076\032\106\033\110\035" +
    "\114\036\116\037\072\045\100\060\u017e\065\077\001\002" +
    "\000\034\013\uff67\014\uff67\015\uff67\016\uff67\031\uff67\032" +
    "\uff67\033\uff67\035\uff67\036\uff67\037\uff67\045\uff67\060\uff67" +
    "\065\uff67\001\002\000\004\054\u0180\001\002\000\004\057" +
    "\u0181\001\002\000\032\013\104\014\111\015\105\016\113" +
    "\031\076\032\106\033\110\035\114\036\116\037\072\045" +
    "\100\065\077\001\002\000\034\013\104\014\111\015\105" +
    "\016\113\031\076\032\106\033\110\035\114\036\116\037" +
    "\072\045\100\060\u0183\065\077\001\002\000\030\002\ufff9" +
    "\006\007\013\010\021\004\022\017\024\015\031\014\032" +
    "\005\060\ufff9\064\ufff9\065\016\001\002\000\010\002\ufff7" +
    "\060\ufff7\064\ufff7\001\002\000\006\054\u0195\066\u0194\001" +
    "\002\000\004\007\u0187\001\002\000\004\065\u0188\001\002" +
    "\000\004\053\u0189\001\002\000\014\013\031\031\033\032" +
    "\032\046\030\054\u018b\001\002\000\004\054\u018f\001\002" +
    "\000\004\057\u018c\001\002\000\004\060\u018d\001\002\000" +
    "\014\013\010\022\017\031\u0118\032\005\065\016\001\002" +
    "\000\010\002\uffef\060\uffef\064\uffef\001\002\000\004\057" +
    "\u0190\001\002\000\032\013\104\014\111\015\105\016\113" +
    "\031\076\032\106\033\110\035\114\036\116\037\072\045" +
    "\100\065\077\001\002\000\034\013\104\014\111\015\105" +
    "\016\113\031\076\032\106\033\110\035\114\036\116\037" +
    "\072\045\100\060\u0192\065\077\001\002\000\014\013\010" +
    "\022\017\031\u0118\032\005\065\016\001\002\000\010\002" +
    "\ufff0\060\ufff0\064\ufff0\001\002\000\004\054\u01c5\001\002" +
    "\000\012\002\ufff3\057\u0196\060\ufff3\064\ufff3\001\002\000" +
    "\004\060\u0197\001\002\000\026\002\ufff4\013\u019b\014\u0103" +
    "\022\017\031\u019c\032\u019a\045\100\060\ufff4\064\ufff4\065" +
    "\u019d\001\002\000\010\002\ufff5\060\ufff5\064\ufff5\001\002" +
    "\000\026\002\uffe7\013\u019b\014\u0103\022\017\031\u019c\032" +
    "\u019a\045\100\060\uffe7\064\uffe7\065\u019d\001\002\000\004" +
    "\065\u01b2\001\002\000\006\051\360\065\u01a0\001\002\000" +
    "\006\051\u014a\065\u019f\001\002\000\026\007\u0186\010\u0108" +
    "\027\u0105\040\u010b\050\u0104\051\u0109\053\u0185\061\u0107\064" +
    "\u0106\065\u010a\001\002\000\010\002\uffe5\060\uffe5\064\uffe5" +
    "\001\002\000\020\007\u011b\040\u0151\050\u014d\051\u0150\053" +
    "\u011a\061\u014f\064\u014e\001\002\000\016\007\u01a1\040\366" +
    "\050\362\051\365\061\364\064\363\001\002\000\004\007" +
    "\u01a2\001\002\000\004\065\u01a3\001\002\000\004\053\u01a4" +
    "\001\002\000\014\013\031\031\033\032\032\046\030\054" +
    "\u01a6\001\002\000\004\054\u01ac\001\002\000\004\046\u01a7" +
    "\001\002\000\004\057\u01a8\001\002\000\032\013\104\014" +
    "\111\015\105\016\113\031\076\032\106\033\110\035\114" +
    "\036\116\037\072\045\100\065\077\001\002\000\034\013" +
    "\104\014\111\015\105\016\113\031\076\032\106\033\110" +
    "\035\114\036\116\037\072\045\100\060\u01aa\065\077\001" +
    "\002\000\014\013\010\022\017\031\u0118\032\005\065\016" +
    "\001\002\000\010\002\uffe9\060\uffe9\064\uffe9\001\002\000" +
    "\004\046\u01ad\001\002\000\004\057\u01ae\001\002\000\032" +
    "\013\104\014\111\015\105\016\113\031\076\032\106\033" +
    "\110\035\114\036\116\037\072\045\100\065\077\001\002" +
    "\000\034\013\104\014\111\015\105\016\113\031\076\032" +
    "\106\033\110\035\114\036\116\037\072\045\100\060\u01b0" +
    "\065\077\001\002\000\014\013\010\022\017\031\u0118\032" +
    "\005\065\016\001\002\000\010\002\uffea\060\uffea\064\uffea" +
    "\001\002\000\012\007\u01b3\040\334\050\332\064\333\001" +
    "\002\000\004\007\u01b4\001\002\000\004\065\u01b5\001\002" +
    "\000\004\053\u01b6\001\002\000\014\013\031\031\033\032" +
    "\032\046\030\054\u01b8\001\002\000\004\054\u01be\001\002" +
    "\000\004\046\u01b9\001\002\000\004\057\u01ba\001\002\000" +
    "\032\013\104\014\111\015\105\016\113\031\076\032\106" +
    "\033\110\035\114\036\116\037\072\045\100\065\077\001" +
    "\002\000\034\013\104\014\111\015\105\016\113\031\076" +
    "\032\106\033\110\035\114\036\116\037\072\045\100\060" +
    "\u01bc\065\077\001\002\000\014\013\010\022\017\031\u0118" +
    "\032\005\065\016\001\002\000\010\002\uffed\060\uffed\064" +
    "\uffed\001\002\000\004\046\u01bf\001\002\000\004\057\u01c0" +
    "\001\002\000\032\013\104\014\111\015\105\016\113\031" +
    "\076\032\106\033\110\035\114\036\116\037\072\045\100" +
    "\065\077\001\002\000\034\013\104\014\111\015\105\016" +
    "\113\031\076\032\106\033\110\035\114\036\116\037\072" +
    "\045\100\060\u01c2\065\077\001\002\000\014\013\010\022" +
    "\017\031\u0118\032\005\065\016\001\002\000\010\002\uffee" +
    "\060\uffee\064\uffee\001\002\000\010\002\uffe6\060\uffe6\064" +
    "\uffe6\001\002\000\010\002\ufff2\060\ufff2\064\ufff2\001\002" +
    "\000\004\026\u01c7\001\002\000\004\064\u01c8\001\002\000" +
    "\030\002\ufff9\006\007\013\010\021\004\022\017\024\015" +
    "\031\014\032\005\060\ufff9\064\ufff9\065\016\001\002\000" +
    "\010\002\ufff8\060\ufff8\064\ufff8\001\002\000\004\053\u01cb" +
    "\001\002\000\004\054\u01cc\001\002\000\004\057\u01cd\001" +
    "\002\000\032\013\104\014\111\015\105\016\113\031\076" +
    "\032\106\033\110\035\114\036\116\037\072\045\100\065" +
    "\077\001\002\000\034\013\104\014\111\015\105\016\113" +
    "\031\076\032\106\033\110\035\114\036\116\037\072\045" +
    "\100\060\u01cf\065\077\001\002\000\010\002\ufffc\060\ufffc" +
    "\064\ufffc\001\002\000\004\007\u01a1\001\002\000\006\005" +
    "\u01d2\027\u01d3\001\002\000\004\065\u01d7\001\002\000\004" +
    "\065\u01d4\001\002\000\004\030\u01d5\001\002\000\030\002" +
    "\ufff9\006\007\013\010\021\004\022\017\024\015\031\014" +
    "\032\005\060\ufff9\064\ufff9\065\016\001\002\000\010\002" +
    "\ufffb\060\ufffb\064\ufffb\001\002\000\004\010\u01d8\001\002" +
    "\000\004\055\u01d9\001\002\000\004\005\u01da\001\002\000" +
    "\030\002\ufff9\006\007\013\010\021\004\022\017\024\015" +
    "\031\014\032\005\060\ufff9\064\ufff9\065\016\001\002\000" +
    "\010\002\ufffa\060\ufffa\064\ufffa\001\002\000\004\002\001" +
    "\001\002\000\004\007\u01b3\001\002\000\004\057\u01df\001" +
    "\002\000\004\020\u01e0\001\002\000\004\007\u01e1\001\002" +
    "\000\020\013\u019b\014\u0103\022\017\031\u019c\032\u019a\045" +
    "\100\065\u019d\001\002\000\004\060\u01e3\001\002\000\004" +
    "\064\u01e4\001\002\000\030\002\ufff9\006\007\013\010\021" +
    "\004\022\017\024\015\031\014\032\005\060\ufff9\064\ufff9" +
    "\065\016\001\002\000\010\002\uffe8\060\uffe8\064\uffe8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e3\000\014\002\005\015\010\016\011\017\017\025" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\040\001\001\000\002\001\001" +
    "\000\004\020\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\050\001\001\000\002\001\001\000" +
    "\004\020\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\060\001\001\000\002\001\001\000\004" +
    "\020\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\074\004\073\006\100\007\101\010\072\011\106" +
    "\012\114\021\070\022\102\031\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\177\006\200\007\202\010\176\011\204\012" +
    "\206\021\175\022\203\031\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\221\027\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\174\004\073\006\100" +
    "\007\101\010\072\011\106\012\114\021\070\022\102\031" +
    "\111\001\001\000\024\004\177\006\200\007\202\010\176" +
    "\011\204\012\206\021\175\022\203\031\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\211\004\073\006\100\007" +
    "\101\010\072\011\106\012\114\021\070\022\102\031\111" +
    "\001\001\000\024\004\177\006\200\007\202\010\176\011" +
    "\204\012\206\021\175\022\203\031\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\277\027\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\253\001\001\000\002\001\001\000\004\030\245\001" +
    "\001\000\002\001\001\000\004\030\252\001\001\000\004" +
    "\030\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\277\027\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\322\004\073" +
    "\006\100\007\101\010\072\011\106\012\114\021\070\022" +
    "\102\031\111\001\001\000\024\004\177\006\200\007\202" +
    "\010\176\011\204\012\206\021\175\022\203\031\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\326" +
    "\004\073\006\100\007\101\010\072\011\106\012\114\021" +
    "\070\022\102\031\111\001\001\000\024\004\177\006\200" +
    "\007\202\010\176\011\204\012\206\021\175\022\203\031" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\u0122\004" +
    "\073\006\100\007\101\010\072\011\106\012\114\021\070" +
    "\022\102\031\111\001\001\000\024\004\177\006\200\007" +
    "\202\010\176\011\204\012\206\021\175\022\203\031\205" +
    "\001\001\000\004\017\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\u0128\004\073" +
    "\006\100\007\101\010\072\011\106\012\114\021\070\022" +
    "\102\031\111\001\001\000\024\004\177\006\200\007\202" +
    "\010\176\011\204\012\206\021\175\022\203\031\205\001" +
    "\001\000\004\017\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\u012e\004\073\006" +
    "\100\007\101\010\072\011\106\012\114\021\070\022\102" +
    "\031\111\001\001\000\024\004\177\006\200\007\202\010" +
    "\176\011\204\012\206\021\175\022\203\031\205\001\001" +
    "\000\014\002\u0130\015\010\016\011\017\017\025\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u015a" +
    "\001\001\000\002\001\001\000\004\014\u015c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0164\001\001\000\002\001\001\000\004" +
    "\005\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0171\001\001\000\002" +
    "\001\001\000\004\005\u0173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0177\001\001" +
    "\000\002\001\001\000\004\005\u0179\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\u017c\004\073\006\100" +
    "\007\101\010\072\011\106\012\114\021\070\022\102\031" +
    "\111\001\001\000\024\004\177\006\200\007\202\010\176" +
    "\011\204\012\206\021\175\022\203\031\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\u0181\004\073\006\100\007\101\010\072\011\106\012" +
    "\114\021\070\022\102\031\111\001\001\000\024\004\177" +
    "\006\200\007\202\010\176\011\204\012\206\021\175\022" +
    "\203\031\205\001\001\000\014\002\u0183\015\010\016\011" +
    "\017\017\025\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u018d\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\u0190\004\073\006" +
    "\100\007\101\010\072\011\106\012\114\021\070\022\102" +
    "\031\111\001\001\000\024\004\177\006\200\007\202\010" +
    "\176\011\204\012\206\021\175\022\203\031\205\001\001" +
    "\000\004\017\u0192\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0198" +
    "\017\u019d\026\u0197\001\001\000\002\001\001\000\010\004" +
    "\u0198\017\u019d\026\u01c3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u01a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\u01a8\004\073\006\100\007\101\010\072\011" +
    "\106\012\114\021\070\022\102\031\111\001\001\000\024" +
    "\004\177\006\200\007\202\010\176\011\204\012\206\021" +
    "\175\022\203\031\205\001\001\000\004\017\u01aa\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\u01ae\004\073\006\100\007\101\010\072\011\106" +
    "\012\114\021\070\022\102\031\111\001\001\000\024\004" +
    "\177\006\200\007\202\010\176\011\204\012\206\021\175" +
    "\022\203\031\205\001\001\000\004\017\u01b0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u01b6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\u01ba\004\073\006\100\007\101\010\072\011\106\012" +
    "\114\021\070\022\102\031\111\001\001\000\024\004\177" +
    "\006\200\007\202\010\176\011\204\012\206\021\175\022" +
    "\203\031\205\001\001\000\004\017\u01bc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\u01c0\004\073\006\100\007\101\010\072\011\106\012\114" +
    "\021\070\022\102\031\111\001\001\000\024\004\177\006" +
    "\200\007\202\010\176\011\204\012\206\021\175\022\203" +
    "\031\205\001\001\000\004\017\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\u01c8\015\010\016\011\017" +
    "\017\025\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\u01cd\004" +
    "\073\006\100\007\101\010\072\011\106\012\114\021\070" +
    "\022\102\031\111\001\001\000\024\004\177\006\200\007" +
    "\202\010\176\011\204\012\206\021\175\022\203\031\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\u01d5\015\010\016\011\017\017\025\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\u01da\015\010\016\011\017" +
    "\017\025\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\u0198\017\u019d\026\u01e1\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\u01e4\015" +
    "\010\016\011\017\017\025\012\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FINAL ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FOR ::= Entero Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_c Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_BOOLEANA ::= Identificador ParentesisAngular_a Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_BOOLEANA ::= Identificador Op_aritmetico Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CADENA_INGRESAR ::= Simbolo_cin Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_INGRESAR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CADENA_INGRESAR ::= Simbolo_cin Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_INGRESAR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INGRESAR_DATOS ::= Cin CADENA_INGRESAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INGRESAR_DATOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TEXTO ::= Identificador TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TEXTO ::= Identificador Punto TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TEXTO ::= Numero Parentesis_c TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TEXTO ::= Numero TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTO ::= Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TEXTO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TEXTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CADENA_IMPRIMIR ::= Simbolo_cout Comillas Identificador Dos_puntos Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CADENA_IMPRIMIR ::= Simbolo_cout Comillas TEXTO Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CADENA_IMPRIMIR ::= Simbolo_cout Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CADENA_IMPRIMIR ::= Simbolo_cout Numero Punto Numero Multiplicacion Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CADENA_IMPRIMIR ::= Simbolo_cout Numero Punto Numero Op_aritmetico Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CADENA_IMPRIMIR ::= Simbolo_cout Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CADENA_IMPRIMIR ::= Simbolo_cout Numero Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CADENA_IMPRIMIR ::= Simbolo_cout Numero Op_aritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CADENA_IMPRIMIR ::= Simbolo_cout Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador Op_aritmetico Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador Op_aritmetico Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CADENA_IMPRIMIR ::= Simbolo_cout Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_IMPRIMIR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // REPETIR_COUT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR_COUT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // REPETIR_COUT ::= Simbolo_cout Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR_COUT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REPETIR_COUT ::= CADENA_IMPRIMIR REPETIR_COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR_COUT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IMPRIMIR_PANTALLA ::= Cout REPETIR_COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_PANTALLA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IMPRIMIR_PANTALLA ::= Cout CADENA_IMPRIMIR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_PANTALLA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Return Multiplicacion Identificador Multiplicacion Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Return Multiplicacion Identificador Op_aritmetico Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= This Flecha DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Identificador Punto FUNCION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Identificador Op_atribucion Identificador Corchete_a Identificador Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Identificador Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Identificador Identificador Parentesis_a Numero Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Identificador ParentesisAngular_a T_dato ParentesisAngular_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Identificador ParentesisAngular_a Entero ParentesisAngular_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Identificador ParentesisAngular_a Cadena ParentesisAngular_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= T_dato Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Entero Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Entero Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Entero Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Entero Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Entero Identificador Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Entero Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA ::= SENTENCIA FINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA ::= INGRESAR_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA ::= SENTENCIA INGRESAR_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA ::= IMPRIMIR_PANTALLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= SENTENCIA IMPRIMIR_PANTALLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETRO ::= Cadena Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETRO ::= T_dato Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETRO ::= Entero Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETRO ::= T_dato Multiplicacion Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETRO ::= Entero Multiplicacion Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETRO ::= Cadena Multiplicacion Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETRO ::= T_dato Ampersand Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETRO ::= Entero Ampersand Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO ::= Cadena Ampersand Identificador PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= T_dato Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO ::= Entero Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= Cadena Multiplicacion Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO ::= T_dato Ampersand Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= Entero Ampersand Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETRO ::= Cadena Ampersand Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= Const Cadena Ampersand Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETRO ::= Cadena Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= Entero Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_CLASE ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_CLASE ::= DECLARACION SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_CLASE ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CLASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASE ::= Class Identificador Llave_a Especificador Dos_puntos SENTENCIA_CLASE Llave_c P_coma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLASE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= T_dato Identificador Dos_puntos Dos_puntos Identificador Parentesis_a Parentesis_c Const Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= T_dato Identificador Dos_puntos Dos_puntos Identificador Parentesis_a PARAMETRO Parentesis_c Const Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCION ::= Entero Identificador Dos_puntos Dos_puntos Identificador Parentesis_a Parentesis_c Const Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= Entero Identificador Dos_puntos Dos_puntos Identificador Parentesis_a Const PARAMETRO Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= Cadena Identificador Dos_puntos Dos_puntos Identificador Parentesis_a Parentesis_c Const Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= Cadena Identificador Dos_puntos Dos_puntos Identificador Parentesis_a PARAMETRO Parentesis_c Const Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= Identificador Dos_puntos Dos_puntos Identificador Parentesis_a Parentesis_c Llave_a Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= Identificador Dos_puntos Dos_puntos Identificador Parentesis_a PARAMETRO Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= Entero Identificador Parentesis_a PARAMETRO Parentesis_c Llave_a SENTENCIA Llave_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= Identificador Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= Identificador Parentesis_a Parentesis_c Llave_a Llave_c SENTENCIA_CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= Void Identificador Dos_puntos Dos_puntos Identificador Parentesis_a PARAMETRO Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= Void Identificador Parentesis_a PARAMETRO Parentesis_c Llave_a SENTENCIA Llave_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NAMESPACE ::= Using Namespace Std P_coma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NAMESPACE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIA ::= Gato Include Comillas Identificador Punto H Comillas INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIA ::= Gato Include ParentesisAngular_a Identificador ParentesisAngular_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Entero Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NAMESPACE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

